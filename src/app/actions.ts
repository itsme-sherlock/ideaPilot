'use server';

import { z } from 'zod';
import { generateLandingPageContent } from '@/ai/flows/generate-landing-page-content';
import { slugify } from '@/lib/utils';
import { revalidatePath } from 'next/cache';
import { createClient } from '@/lib/supabase/server';
import { rateLimit } from '@/lib/rate-limit';
import { headers } from 'next/headers';
import { getClientIp } from '@/lib/get-ip';

// -------------------------
// SCHEMAS
// -------------------------

const createPageSchema = z.object({
  productDescription: z.string().min(10, 'Description must be at least 10 characters'),
  email: z.string().email('Please enter a valid email'),
});

const addSignupSchema = z.object({
  email: z.string().email('Invalid email'),
  pageId: z.string().min(1),
});

const addFeedbackSchema = z.object({
  response: z.enum(['yes', 'no']),
  comment: z.string().optional(),
  pageId: z.string().min(1),
});

// -------------------------
// MAIN ACTION: Create Landing Page
// -------------------------

export async function createLandingPage(values: z.infer<typeof createPageSchema>) {
  try {
    console.log('Entering createLandingPage function.');
    
    // Check if the user is rate-limited.
    const ip = await getClientIp();
    console.log('Rate limiting for IP:', ip);
    const { allowed, timeLeft } = rateLimit(ip);
    if (!allowed) {
      return {
        success: false,
        error: `Rate limit exceeded. Please try again in ${Math.ceil((timeLeft ?? 0) / 1000 / 60)} minutes.`,
        code: 'RATE_LIMIT_EXCEEDED'
      };
    }

  // Validate the input fields
  const validatedFields = createPageSchema.safeParse(values);
  if (!validatedFields.success) {
    const errors = validatedFields.error.flatten().fieldErrors;
    return {
      success: false,
      error: Object.values(errors)[0]?.[0] || 'Please check your input and try again.',
      code: 'VALIDATION_ERROR',
      fields: errors
    };
  }
  // Extract the validated fields from the `validatedFields` object.
  const { productDescription, email } = validatedFields.data;
  const supabase = createClient();
  // Generate content using AI
  console.log('Calling AI to generate content for:', productDescription);
  const content = await generateLandingPageContent({ productDescription });
  console.log('AI returned:', content);

    // Validate AI response
    const { headline, subHeadline } = content;
    if (!headline || !subHeadline) {
      return { 
        success: false,
        error: 'Failed to generate content. Please try again with a different description.',
        code: 'AI_GENERATION_ERROR'
      };
    }

    // Generate a unique slug for the landing page.
    // The slug is generated by combining the headline with a counter.
    // If the slug is already taken, increment the counter and try again.
    let slug = slugify(headline);
    let counter = 1;

    console.log('Checking slug availability:', slug);
    let { data: existing } = await supabase
      .from('pages')
      .select('slug')
      .eq('slug', slug)
      .maybeSingle();

    while (existing) {
      console.log(`Slug "${slug}" taken. Trying next...`);
      slug = `${slugify(headline)}-${counter}`;
      const { data: nextData } = await supabase
        .from('pages')
        .select('slug')
        .eq('slug', slug)
        .maybeSingle();
      existing = nextData;
      counter++;
    }
    console.log('Final slug:', slug);

    // Insert the landing page into Supabase.
    // The `now` variable is set to the current date and time in ISO format.
    const now = new Date().toISOString();
    console.log(
      'Inserting new page into Supabase:',
      { headline, subHeadline, slug, email }
    );

    const { error: insertError } = await supabase.from('pages').insert({
      idea: productDescription,
      creator_email: email,
      headline,
      sub_headline: subHeadline,
      slug,
      created_at: now,
    });

    if (insertError) {
      console.error('Supabase insert error:', insertError);
      return { 
        success: false,
        error: 'Unable to save your landing page. Please try again.',
        code: 'DATABASE_ERROR'
      };
    }

    // Revalidate the dynamic routes
    revalidatePath(`/p/${slug}`);
    revalidatePath(`/p/${slug}/admin`);

    // Return success response
    return { 
      success: true,
      slug,
      message: 'Landing page created successfully!'
    };
  } catch (error: any) {
    console.error('Error in createLandingPage:', error);
    return { 
      success: false,
      error: 'An unexpected error occurred. Please try again later.',
      code: 'UNKNOWN_ERROR'
    };
  } finally {
    console.log('Exiting createLandingPage function.');
  }
}

// -------------------------
// ACTION: Add Email Signup
// -------------------------

export async function addSignup(values: z.infer<typeof addSignupSchema>) {
  try {
    // Validate input
    const validated = addSignupSchema.safeParse(values);
    if (!validated.success) {
      return { 
        success: false,
        error: 'Please provide a valid email address.',
        code: 'VALIDATION_ERROR',
        fields: validated.error.flatten().fieldErrors
      };
    }

    const { email, pageId } = validated.data;
    const supabase = createClient();

    // Add signup to database
    const { error } = await supabase.from('signups').insert({
      page_id: pageId,
      email,
      created_at: new Date().toISOString(),
    });

    if (error) {
      console.error('Supabase error:', error);
      return { 
        success: false,
        error: 'Unable to process your signup. Please try again.',
        code: 'DATABASE_ERROR'
      };
    }

    revalidatePath(`/p/[slug]/admin`, 'page');
    return { 
      success: true,
      message: 'Thank you for signing up!'
    };
  } catch (error: any) {
    console.error('Error adding signup:', error);
    return { 
      success: false,
      error: 'An unexpected error occurred. Please try again later.',
      code: 'UNKNOWN_ERROR'
    };
  }
}

// -------------------------
// ACTION: Add Feedback
// -------------------------

export async function addFeedback(values: z.infer<typeof addFeedbackSchema>) {
  try {
    // Validate input
    const validated = addFeedbackSchema.safeParse(values);
    if (!validated.success) {
      return { 
        success: false,
        error: 'Please provide valid feedback.',
        code: 'VALIDATION_ERROR',
        fields: validated.error.flatten().fieldErrors
      };
    }

    const { response, comment, pageId } = validated.data;
    const supabase = createClient();

    // Add feedback to database
    const { error } = await supabase.from('feedback').insert({
      page_id: pageId,
      response,
      comment: comment || '',
      created_at: new Date().toISOString(),
    });

    if (error) {
      console.error('Supabase error:', error);
      return { 
        success: false,
        error: 'Unable to save your feedback. Please try again.',
        code: 'DATABASE_ERROR'
      };
    }

    revalidatePath(`/p/[slug]/admin`, 'page');
    return { 
      success: true,
      message: 'Thank you for your feedback!'
    };
  } catch (error: any) {
    console.error('Error adding feedback:', error);
    return { 
      success: false,
      error: 'An unexpected error occurred. Please try again later.',
      code: 'UNKNOWN_ERROR'
    };
  }
}